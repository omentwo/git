name: Advanced Weather Data Collector

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 00:00 运行 (对应上海时间早上8点)
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write # 需要写入权限来提交文件
  pages: write    # <<< ADDED: Needed to deploy to GitHub Pages
  id-token: write # <<< ADDED: Needed for OIDC token for GitHub Pages deployment

jobs:
  collect-weather:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai # 为所有脚本设置时区

    steps:
      # ---------- 基础步骤 ----------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20 # 确保 Node.js 版本与你的脚本兼容

      - name: Install dependencies
        run: npm install axios # 你的 weather.js 可能需要 axios，generate_report.js 使用内置模块

      # ---------- 核心数据获取 ----------
      - name: Run weather script to get data
        id: get-weather # 为步骤设置id以供后续引用输出
        env:
          AMAP_KEY: ${{ secrets.AMAP_KEY }}
          CITY_ADDRESS: "海南省海口市琼山区"
        run: |          
          node ./weather.js
          
          # 检查当天的数据文件是否已生成
          TODAY_DATE=$(date +'%Y-%m-%d')
          WEATHER_FILE_PATH="weather-data/${TODAY_DATE}.json"
          if [ -f "$WEATHER_FILE_PATH" ]; then
            echo "✅ Weather data file found: $WEATHER_FILE_PATH"
            echo "WEATHER_FILE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Weather data file NOT found for today: $WEATHER_FILE_PATH"
            echo "WEATHER_FILE_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      # ---------- 数据校验 (检查天气数据文件是否存在) ----------
      - name: Validate weather data file presence
        if: steps.get-weather.outputs.WEATHER_FILE_EXISTS == 'false'
        run: |
          echo "❌ Critical Error: Today's weather data file was not generated by weather.js."
          echo "Report generation will be skipped or will generate an error report."
          # 你可以选择在这里 exit 1 使整个 job 失败，
          # 或者让 generate_report.js 处理文件不存在的情况并生成一个错误报告。
          # 当前 generate_report.js 的设计是会生成一个错误报告。
          # exit 1 # 如果希望在此处立即失败

      # ---------- 提交天气数据 (仅当数据文件存在时) ----------
      - name: Commit weather data
        if: steps.get-weather.outputs.WEATHER_FILE_EXISTS == 'true' # 确保文件存在才提交
        run: |
          git config --global user.name "omentwo"
          git config --global user.email "omentwo]@users.noreply.github.com"
          git add weather-data/
          # 检查是否有实际更改需要提交
          if git diff --staged --quiet; then
            echo "ℹ️ No changes in weather data to commit."
          else
            git commit -m "🌤️ 更新天气数据 $(date +'%Y-%m-%d %H:%M %Z')"
            git push
            echo "✅ Weather data committed."
          fi

      # ---------- 生成天气报告HTML (调用 generate_report.js) ----------
      - name: Generate weather report HTML
        id: generate-html-report # 给这个步骤一个id
        run: |
          echo "🏃 Running generate_report.js..."
          node generate_report.js
          # 检查 generate_report.js 是否成功生成了 report 文件
          if [ -f "weather-report.html" ]; then
            echo "✅ weather-report.html generated."
            echo "REPORT_GENERATED=true" >> $GITHUB_OUTPUT
          else
            echo "❌ ERROR: weather-report.html was NOT generated by generate_report.js."
            echo "REPORT_GENERATED=false" >> $GITHUB_OUTPUT
            # 可以考虑在这里 exit 1 如果报告生成是关键步骤
          fi
        # 这个步骤无论 weather.js 是否成功生成数据文件都会运行，
        # 因为 generate_report.js 内部有处理数据文件不存在的逻辑（会生成一个错误提示的HTML）

      # ---------- 提交天气报告HTML ----------
      - name: Commit weather report HTML
        # if: steps.generate-html-report.outputs.REPORT_GENERATED == 'true' # 可选：仅当报告确实生成时提交
        # 但即使是错误报告，我们也希望提交，所以不加这个 if
        run: |
          git config --global user.name "omentwo"
          git config --global user.email "omentwo@users.noreply.github.com"
          git add weather-report.html
          # 检查是否有实际更改需要提交
          if git diff --staged --quiet; then
            echo "ℹ️ No changes in weather-report.html to commit."
          else
            git commit -m "📈 更新天气可视化报告 $(date +'%Y-%m-%d %H:%M %Z')"
            git push
            echo "✅ Weather report HTML committed."
          fi

      # ---------- 自动清理旧数据 ----------
      - name: Clean old weather data files
        run: |
          echo "🧹 Cleaning old weather data (older than 30 days)..."
          # -print 会打印出被删除的文件名
          find weather-data/ -name "*.json" -mtime +30 -print -delete
          
          # 提交清理结果 (仅当有文件被删除时)
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add weather-data/ # Stage 任何因删除而产生的变更
          if git diff --staged --quiet; then
            echo "ℹ️ No old weather data files were deleted, no cleanup commit needed."
          else
            git commit -m "🗑️ 清理30天前天气数据"
            git push
            echo "✅ Cleanup of old data committed."
          fi
      # ---------- 上传 GitHub Pages 构建产物 (这是对 collect-weather job 的一个小补充) ----------
      - name: Upload Pages artifact (weather-report.html)
        if: steps.generate-html-report.outputs.REPORT_GENERATED == 'true' # 确保报告生成了才上传
        uses: actions/upload-artifact@v4
        with:
          name: github-pages # 标准名称，deploy-pages job 会使用这个
          path: weather-report.html # 上传 weather-report.html 文件
          retention-days: 1 # 产物保留1天，因为部署后就不再需要了

  # ---------- 新增：部署到 GitHub Pages 的 Job ----------
  deploy-pages:
    needs: collect-weather # 依赖 collect-weather job 完成
    runs-on: ubuntu-latest

    # 定义 GitHub Pages 的部署环境 (可选，但推荐)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Action 会输出部署后的 URL

    # 此 Job 的权限已在 workflow 级别设置 (pages: write, id-token: write)
    # 如果没有在 workflow 级别设置，则需要在这里单独为 job 设置:
    # permissions:
    #   pages: write
    #   id-token: write

    steps:
      - name: Download artifact from collect-weather job
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          # path: . # 默认下载到当前工作目录的根目录，weather-report.html 会在根目录

      - name: Setup Pages
        id: pages # 给步骤ID以备后续使用
        uses: actions/configure-pages@v4
        # 此 action 可以配置自定义域名等，如果不需要则无需额外 with 参数

      - name: Upload artifact for GitHub Pages deployment
        uses: actions/upload-pages-artifact@v3 # 注意是 upload-pages-artifact
        with:
          # 上传整个工作目录 (其中包含了下载下来的 weather-report.html)
          # 如果你的 weather-report.html 需要其他 css/js/image 资源，且这些资源与 report 在同一目录或子目录，
          # 确保它们也被正确下载或存在于上传的路径中。
          # 当前假设 weather-report.html 是自包含的，或者它的相对路径资源在上传时也存在。
          path: '.' # 当前工作目录，其中应包含 weather-report.html

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # 此 action 会自动找到名为 'github-pages' 的环境和由 upload-pages-artifact 准备的产物
